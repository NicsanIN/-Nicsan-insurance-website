{"ast":null,"code":"// Simple email service using EmailJS\n// You can also use other services like Formspree, SendGrid, etc.\n\nclass EmailService {\n  constructor() {\n    // EmailJS configuration\n    this.emailjsConfig = {\n      serviceId: 'YOUR_EMAILJS_SERVICE_ID',\n      // Replace with your EmailJS service ID\n      templateId: 'YOUR_EMAILJS_TEMPLATE_ID',\n      // Replace with your EmailJS template ID\n      userId: 'YOUR_EMAILJS_USER_ID' // Replace with your EmailJS user ID\n    };\n\n    // Formspree configuration - REPLACE WITH YOUR ACTUAL FORM ID\n    this.formspreeEndpoint = 'https://formspree.io/f/xdkdpeel'; // Your Formspree form endpoint\n  }\n\n  // Send email notification using EmailJS\n  async sendEmailJSNotification(safetyCallData) {\n    try {\n      var _safetyCallData$form_;\n      // Load EmailJS library dynamically\n      if (typeof window !== 'undefined' && !window.emailjs) {\n        await this.loadEmailJSLibrary();\n      }\n      const templateParams = {\n        to_email: 'connect@nicsanimf.com',\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\n        message: this.formatEmailMessage(safetyCallData),\n        customer_name: safetyCallData.customer_name || 'Unknown',\n        product_name: safetyCallData.product_name || 'Unknown',\n        phone: ((_safetyCallData$form_ = safetyCallData.form_data) === null || _safetyCallData$form_ === void 0 ? void 0 : _safetyCallData$form_['Phone No.']) || 'Not provided',\n        request_id: safetyCallData.id\n      };\n      const response = await window.emailjs.send(this.emailjsConfig.serviceId, this.emailjsConfig.templateId, templateParams, this.emailjsConfig.userId);\n      console.log('Email sent successfully:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Failed to send email via EmailJS:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Send email notification using Formspree (simpler alternative)\n  async sendFormspreeNotification(safetyCallData) {\n    try {\n      var _safetyCallData$form_2;\n      const emailData = {\n        email: 'connect@nicsanimf.com',\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'General Inquiry'}`,\n        message: this.formatEmailMessage(safetyCallData),\n        customer_name: safetyCallData.customer_name || 'Unknown',\n        product_name: safetyCallData.product_name || 'General Inquiry',\n        phone: ((_safetyCallData$form_2 = safetyCallData.form_data) === null || _safetyCallData$form_2 === void 0 ? void 0 : _safetyCallData$form_2.phone) || safetyCallData.phone_number || 'Not provided',\n        request_id: safetyCallData.id\n      };\n      const response = await fetch(this.formspreeEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      });\n      if (response.ok) {\n        console.log('Email sent successfully via Formspree');\n        return {\n          success: true,\n          response\n        };\n      } else {\n        throw new Error(`Formspree request failed: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Failed to send email via Formspree:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Format email message\n  formatEmailMessage(safetyCallData) {\n    var _safetyCallData$form_3;\n    const currentDate = new Date(safetyCallData.created_at).toLocaleString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'Asia/Kolkata'\n    });\n    const productName = safetyCallData.product_name || (safetyCallData.product_id ? 'Unknown Product' : 'General Inquiry');\n    const phoneNumber = ((_safetyCallData$form_3 = safetyCallData.form_data) === null || _safetyCallData$form_3 === void 0 ? void 0 : _safetyCallData$form_3.phone) || safetyCallData.phone_number || 'Not provided';\n    return `\n🚨 NEW SAFETY CALL REQUEST - NICSAN INSURANCE\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n📋 REQUEST DETAILS:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n• Request ID: ${safetyCallData.id || 'N/A'}\n• Product: ${productName}\n• Submitted: ${currentDate}\n\n👤 CUSTOMER INFORMATION:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n• Name: ${safetyCallData.customer_name || 'Not provided'}\n• Phone: ${phoneNumber}\n• Email: ${safetyCallData.email || 'Not provided'}\n\n📊 FORM DATA:\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n${this.formatFormData(safetyCallData.form_data)}\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n⚠️  ACTION REQUIRED: Please contact the customer within 24 hours to schedule the safety call.\n\nBest regards,\nNicsan Insurance Team\n📧 connect@nicsanimf.com\n📞 080-996655\n    `.trim();\n  }\n\n  // Helper method to format form data nicely\n  formatFormData(formData) {\n    if (!formData || Object.keys(formData).length === 0) {\n      return 'No additional form data provided.';\n    }\n    let formattedData = '';\n    for (const [key, value] of Object.entries(formData)) {\n      if (value && value !== 'Not provided') {\n        formattedData += `• ${key}: ${value}\\n`;\n      }\n    }\n    return formattedData.trim() || 'No additional form data provided.';\n  }\n\n  // Load EmailJS library\n  async loadEmailJSLibrary() {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';\n      script.onload = () => {\n        window.emailjs.init(this.emailjsConfig.userId);\n        resolve();\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  // Send notification (tries EmailJS first, falls back to Formspree)\n  async sendNotification(safetyCallData) {\n    // Try EmailJS first\n    const emailjsResult = await this.sendEmailJSNotification(safetyCallData);\n    if (emailjsResult.success) {\n      return emailjsResult;\n    }\n\n    // Fall back to Formspree\n    return await this.sendFormspreeNotification(safetyCallData);\n  }\n}\nconst emailService = new EmailService();\nexport default emailService;","map":{"version":3,"names":["EmailService","constructor","emailjsConfig","serviceId","templateId","userId","formspreeEndpoint","sendEmailJSNotification","safetyCallData","_safetyCallData$form_","window","emailjs","loadEmailJSLibrary","templateParams","to_email","subject","product_name","message","formatEmailMessage","customer_name","phone","form_data","request_id","id","response","send","console","log","success","error","sendFormspreeNotification","_safetyCallData$form_2","emailData","email","phone_number","fetch","method","headers","body","JSON","stringify","ok","Error","status","_safetyCallData$form_3","currentDate","Date","created_at","toLocaleString","year","month","day","hour","minute","timeZone","productName","product_id","phoneNumber","formatFormData","trim","formData","Object","keys","length","formattedData","key","value","entries","Promise","resolve","reject","script","document","createElement","src","onload","init","onerror","head","appendChild","sendNotification","emailjsResult","emailService"],"sources":["C:/Users/pkuma/Figma 4.0/src/services/emailService.js"],"sourcesContent":["// Simple email service using EmailJS\r\n// You can also use other services like Formspree, SendGrid, etc.\r\n\r\nclass EmailService {\r\n  constructor() {\r\n    // EmailJS configuration\r\n    this.emailjsConfig = {\r\n      serviceId: 'YOUR_EMAILJS_SERVICE_ID', // Replace with your EmailJS service ID\r\n      templateId: 'YOUR_EMAILJS_TEMPLATE_ID', // Replace with your EmailJS template ID\r\n      userId: 'YOUR_EMAILJS_USER_ID', // Replace with your EmailJS user ID\r\n    };\r\n    \r\n    // Formspree configuration - REPLACE WITH YOUR ACTUAL FORM ID\r\n    this.formspreeEndpoint = 'https://formspree.io/f/xdkdpeel'; // Your Formspree form endpoint\r\n  }\r\n\r\n  // Send email notification using EmailJS\r\n  async sendEmailJSNotification(safetyCallData) {\r\n    try {\r\n      // Load EmailJS library dynamically\r\n      if (typeof window !== 'undefined' && !window.emailjs) {\r\n        await this.loadEmailJSLibrary();\r\n      }\r\n\r\n             const templateParams = {\r\n         to_email: 'connect@nicsanimf.com',\r\n         subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\r\n         message: this.formatEmailMessage(safetyCallData),\r\n         customer_name: safetyCallData.customer_name || 'Unknown',\r\n         product_name: safetyCallData.product_name || 'Unknown',\r\n         phone: safetyCallData.form_data?.['Phone No.'] || 'Not provided',\r\n         request_id: safetyCallData.id\r\n       };\r\n\r\n      const response = await window.emailjs.send(\r\n        this.emailjsConfig.serviceId,\r\n        this.emailjsConfig.templateId,\r\n        templateParams,\r\n        this.emailjsConfig.userId\r\n      );\r\n\r\n      console.log('Email sent successfully:', response);\r\n      return { success: true, response };\r\n    } catch (error) {\r\n      console.error('Failed to send email via EmailJS:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Send email notification using Formspree (simpler alternative)\r\n  async sendFormspreeNotification(safetyCallData) {\r\n         try {\r\n       const emailData = {\r\n         email: 'connect@nicsanimf.com',\r\n         subject: `New Safety Call Request - ${safetyCallData.product_name || 'General Inquiry'}`,\r\n         message: this.formatEmailMessage(safetyCallData),\r\n         customer_name: safetyCallData.customer_name || 'Unknown',\r\n         product_name: safetyCallData.product_name || 'General Inquiry',\r\n         phone: safetyCallData.form_data?.phone || safetyCallData.phone_number || 'Not provided',\r\n         request_id: safetyCallData.id\r\n       };\r\n\r\n      const response = await fetch(this.formspreeEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(emailData)\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Email sent successfully via Formspree');\r\n        return { success: true, response };\r\n      } else {\r\n        throw new Error(`Formspree request failed: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to send email via Formspree:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Format email message\r\n  formatEmailMessage(safetyCallData) {\r\n    const currentDate = new Date(safetyCallData.created_at).toLocaleString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      timeZone: 'Asia/Kolkata'\r\n    });\r\n\r\n    const productName = safetyCallData.product_name || (safetyCallData.product_id ? 'Unknown Product' : 'General Inquiry');\r\n    const phoneNumber = safetyCallData.form_data?.phone || safetyCallData.phone_number || 'Not provided';\r\n\r\n    return `\r\n🚨 NEW SAFETY CALL REQUEST - NICSAN INSURANCE\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n📋 REQUEST DETAILS:\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n• Request ID: ${safetyCallData.id || 'N/A'}\r\n• Product: ${productName}\r\n• Submitted: ${currentDate}\r\n\r\n👤 CUSTOMER INFORMATION:\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n• Name: ${safetyCallData.customer_name || 'Not provided'}\r\n• Phone: ${phoneNumber}\r\n• Email: ${safetyCallData.email || 'Not provided'}\r\n\r\n📊 FORM DATA:\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n${this.formatFormData(safetyCallData.form_data)}\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n⚠️  ACTION REQUIRED: Please contact the customer within 24 hours to schedule the safety call.\r\n\r\nBest regards,\r\nNicsan Insurance Team\r\n📧 connect@nicsanimf.com\r\n📞 080-996655\r\n    `.trim();\r\n  }\r\n\r\n  // Helper method to format form data nicely\r\n  formatFormData(formData) {\r\n    if (!formData || Object.keys(formData).length === 0) {\r\n      return 'No additional form data provided.';\r\n    }\r\n\r\n    let formattedData = '';\r\n    for (const [key, value] of Object.entries(formData)) {\r\n      if (value && value !== 'Not provided') {\r\n        formattedData += `• ${key}: ${value}\\n`;\r\n      }\r\n    }\r\n    \r\n    return formattedData.trim() || 'No additional form data provided.';\r\n  }\r\n\r\n  // Load EmailJS library\r\n  async loadEmailJSLibrary() {\r\n    return new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';\r\n      script.onload = () => {\r\n        window.emailjs.init(this.emailjsConfig.userId);\r\n        resolve();\r\n      };\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  }\r\n\r\n  // Send notification (tries EmailJS first, falls back to Formspree)\r\n  async sendNotification(safetyCallData) {\r\n    // Try EmailJS first\r\n    const emailjsResult = await this.sendEmailJSNotification(safetyCallData);\r\n    if (emailjsResult.success) {\r\n      return emailjsResult;\r\n    }\r\n\r\n    // Fall back to Formspree\r\n    return await this.sendFormspreeNotification(safetyCallData);\r\n  }\r\n}\r\n\r\nconst emailService = new EmailService();\r\nexport default emailService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}