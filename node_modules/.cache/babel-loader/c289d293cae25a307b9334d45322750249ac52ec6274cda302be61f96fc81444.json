{"ast":null,"code":"// Simple email service using EmailJS\n// You can also use other services like Formspree, SendGrid, etc.\n\nclass EmailService {\n  constructor() {\n    // EmailJS configuration\n    this.emailjsConfig = {\n      serviceId: 'YOUR_EMAILJS_SERVICE_ID',\n      // Replace with your EmailJS service ID\n      templateId: 'YOUR_EMAILJS_TEMPLATE_ID',\n      // Replace with your EmailJS template ID\n      userId: 'YOUR_EMAILJS_USER_ID' // Replace with your EmailJS user ID\n    };\n\n    // Formspree configuration - REPLACE WITH YOUR ACTUAL FORM ID\n    this.formspreeEndpoint = 'https://formspree.io/f/YOUR_FORMSPREE_ID'; // Replace YOUR_FORMSPREE_ID with your actual form ID\n  }\n\n  // Send email notification using EmailJS\n  async sendEmailJSNotification(safetyCallData) {\n    try {\n      var _safetyCallData$form_;\n      // Load EmailJS library dynamically\n      if (typeof window !== 'undefined' && !window.emailjs) {\n        await this.loadEmailJSLibrary();\n      }\n      const templateParams = {\n        to_email: 'pkumarswamy007@gmail.com',\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\n        message: this.formatEmailMessage(safetyCallData),\n        customer_name: safetyCallData.customer_name || 'Unknown',\n        product_name: safetyCallData.product_name || 'Unknown',\n        phone: ((_safetyCallData$form_ = safetyCallData.form_data) === null || _safetyCallData$form_ === void 0 ? void 0 : _safetyCallData$form_['Phone No.']) || 'Not provided',\n        request_id: safetyCallData.id\n      };\n      const response = await window.emailjs.send(this.emailjsConfig.serviceId, this.emailjsConfig.templateId, templateParams, this.emailjsConfig.userId);\n      console.log('Email sent successfully:', response);\n      return {\n        success: true,\n        response\n      };\n    } catch (error) {\n      console.error('Failed to send email via EmailJS:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Send email notification using Formspree (simpler alternative)\n  async sendFormspreeNotification(safetyCallData) {\n    try {\n      var _safetyCallData$form_2;\n      const emailData = {\n        email: 'pkumarswamy007@gmail.com',\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\n        message: this.formatEmailMessage(safetyCallData),\n        customer_name: safetyCallData.customer_name || 'Unknown',\n        product_name: safetyCallData.product_name || 'Unknown',\n        phone: ((_safetyCallData$form_2 = safetyCallData.form_data) === null || _safetyCallData$form_2 === void 0 ? void 0 : _safetyCallData$form_2['Phone No.']) || 'Not provided',\n        request_id: safetyCallData.id\n      };\n      const response = await fetch(this.formspreeEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      });\n      if (response.ok) {\n        console.log('Email sent successfully via Formspree');\n        return {\n          success: true,\n          response\n        };\n      } else {\n        throw new Error(`Formspree request failed: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Failed to send email via Formspree:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Format email message\n  formatEmailMessage(safetyCallData) {\n    var _safetyCallData$form_3;\n    return `\nNew Safety Call Request Received\n\nRequest ID: ${safetyCallData.id}\nProduct: ${safetyCallData.product_name || 'Unknown'}\nCustomer Name: ${safetyCallData.customer_name || 'Not provided'}\nAge: ${safetyCallData.age || 'Not provided'}\nEmail: ${safetyCallData.email || 'Not provided'}\nPhone: ${((_safetyCallData$form_3 = safetyCallData.form_data) === null || _safetyCallData$form_3 === void 0 ? void 0 : _safetyCallData$form_3['Phone No.']) || 'Not provided'}\n\nForm Data:\n${JSON.stringify(safetyCallData.form_data, null, 2)}\n\nSubmitted at: ${new Date(safetyCallData.created_at).toLocaleString()}\n\nPlease review and take appropriate action.\n    `.trim();\n  }\n\n  // Load EmailJS library\n  async loadEmailJSLibrary() {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';\n      script.onload = () => {\n        window.emailjs.init(this.emailjsConfig.userId);\n        resolve();\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  // Send notification (tries EmailJS first, falls back to Formspree)\n  async sendNotification(safetyCallData) {\n    // Try EmailJS first\n    const emailjsResult = await this.sendEmailJSNotification(safetyCallData);\n    if (emailjsResult.success) {\n      return emailjsResult;\n    }\n\n    // Fall back to Formspree\n    return await this.sendFormspreeNotification(safetyCallData);\n  }\n}\nconst emailService = new EmailService();\nexport default emailService;","map":{"version":3,"names":["EmailService","constructor","emailjsConfig","serviceId","templateId","userId","formspreeEndpoint","sendEmailJSNotification","safetyCallData","_safetyCallData$form_","window","emailjs","loadEmailJSLibrary","templateParams","to_email","subject","product_name","message","formatEmailMessage","customer_name","phone","form_data","request_id","id","response","send","console","log","success","error","sendFormspreeNotification","_safetyCallData$form_2","emailData","email","fetch","method","headers","body","JSON","stringify","ok","Error","status","_safetyCallData$form_3","age","Date","created_at","toLocaleString","trim","Promise","resolve","reject","script","document","createElement","src","onload","init","onerror","head","appendChild","sendNotification","emailjsResult","emailService"],"sources":["C:/Users/pkuma/Figma 4.0/src/services/emailService.js"],"sourcesContent":["// Simple email service using EmailJS\r\n// You can also use other services like Formspree, SendGrid, etc.\r\n\r\nclass EmailService {\r\n  constructor() {\r\n    // EmailJS configuration\r\n    this.emailjsConfig = {\r\n      serviceId: 'YOUR_EMAILJS_SERVICE_ID', // Replace with your EmailJS service ID\r\n      templateId: 'YOUR_EMAILJS_TEMPLATE_ID', // Replace with your EmailJS template ID\r\n      userId: 'YOUR_EMAILJS_USER_ID', // Replace with your EmailJS user ID\r\n    };\r\n    \r\n    // Formspree configuration - REPLACE WITH YOUR ACTUAL FORM ID\r\n    this.formspreeEndpoint = 'https://formspree.io/f/YOUR_FORMSPREE_ID'; // Replace YOUR_FORMSPREE_ID with your actual form ID\r\n  }\r\n\r\n  // Send email notification using EmailJS\r\n  async sendEmailJSNotification(safetyCallData) {\r\n    try {\r\n      // Load EmailJS library dynamically\r\n      if (typeof window !== 'undefined' && !window.emailjs) {\r\n        await this.loadEmailJSLibrary();\r\n      }\r\n\r\n      const templateParams = {\r\n        to_email: 'pkumarswamy007@gmail.com',\r\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\r\n        message: this.formatEmailMessage(safetyCallData),\r\n        customer_name: safetyCallData.customer_name || 'Unknown',\r\n        product_name: safetyCallData.product_name || 'Unknown',\r\n        phone: safetyCallData.form_data?.['Phone No.'] || 'Not provided',\r\n        request_id: safetyCallData.id\r\n      };\r\n\r\n      const response = await window.emailjs.send(\r\n        this.emailjsConfig.serviceId,\r\n        this.emailjsConfig.templateId,\r\n        templateParams,\r\n        this.emailjsConfig.userId\r\n      );\r\n\r\n      console.log('Email sent successfully:', response);\r\n      return { success: true, response };\r\n    } catch (error) {\r\n      console.error('Failed to send email via EmailJS:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Send email notification using Formspree (simpler alternative)\r\n  async sendFormspreeNotification(safetyCallData) {\r\n    try {\r\n      const emailData = {\r\n        email: 'pkumarswamy007@gmail.com',\r\n        subject: `New Safety Call Request - ${safetyCallData.product_name || 'Insurance Product'}`,\r\n        message: this.formatEmailMessage(safetyCallData),\r\n        customer_name: safetyCallData.customer_name || 'Unknown',\r\n        product_name: safetyCallData.product_name || 'Unknown',\r\n        phone: safetyCallData.form_data?.['Phone No.'] || 'Not provided',\r\n        request_id: safetyCallData.id\r\n      };\r\n\r\n      const response = await fetch(this.formspreeEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(emailData)\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Email sent successfully via Formspree');\r\n        return { success: true, response };\r\n      } else {\r\n        throw new Error(`Formspree request failed: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to send email via Formspree:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Format email message\r\n  formatEmailMessage(safetyCallData) {\r\n    return `\r\nNew Safety Call Request Received\r\n\r\nRequest ID: ${safetyCallData.id}\r\nProduct: ${safetyCallData.product_name || 'Unknown'}\r\nCustomer Name: ${safetyCallData.customer_name || 'Not provided'}\r\nAge: ${safetyCallData.age || 'Not provided'}\r\nEmail: ${safetyCallData.email || 'Not provided'}\r\nPhone: ${safetyCallData.form_data?.['Phone No.'] || 'Not provided'}\r\n\r\nForm Data:\r\n${JSON.stringify(safetyCallData.form_data, null, 2)}\r\n\r\nSubmitted at: ${new Date(safetyCallData.created_at).toLocaleString()}\r\n\r\nPlease review and take appropriate action.\r\n    `.trim();\r\n  }\r\n\r\n  // Load EmailJS library\r\n  async loadEmailJSLibrary() {\r\n    return new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js';\r\n      script.onload = () => {\r\n        window.emailjs.init(this.emailjsConfig.userId);\r\n        resolve();\r\n      };\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  }\r\n\r\n  // Send notification (tries EmailJS first, falls back to Formspree)\r\n  async sendNotification(safetyCallData) {\r\n    // Try EmailJS first\r\n    const emailjsResult = await this.sendEmailJSNotification(safetyCallData);\r\n    if (emailjsResult.success) {\r\n      return emailjsResult;\r\n    }\r\n\r\n    // Fall back to Formspree\r\n    return await this.sendFormspreeNotification(safetyCallData);\r\n  }\r\n}\r\n\r\nconst emailService = new EmailService();\r\nexport default emailService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}